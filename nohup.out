listening on port 1729
Executing (default): SELECT `id`, `firstName`, `lastName`, `passHash`, `role`, `email`, `addressOne`, `addressTwo`, `phone`, `businessName`, `businessWeb`, `businessPhone`, `businessFax`, `created_at`, `updated_at`, `deleted_at` FROM `user` AS `user` WHERE `user`.`id` = 'd08dd52f-7d2a-4fa9-80e6-286750b6735e';
user  Instance {
  dataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _previousDataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _changed: {},
  '$modelOptions': 
   { timestamps: true,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: true,
     underscoredAll: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: [],
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     omitNul: false,
     sequelize: 
      Sequelize {
        options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  '$options': 
   { isNewRecord: false,
     '$schema': null,
     '$schemaDelimiter': '',
     raw: true,
     attributes: 
      [ 'id',
        'firstName',
        'lastName',
        'passHash',
        'role',
        'email',
        'addressOne',
        'addressTwo',
        'phone',
        'businessName',
        'businessWeb',
        'businessPhone',
        'businessFax',
        'created_at',
        'updated_at',
        'deleted_at' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
Executing (default): SELECT `company`.`id`, `company`.`name`, `company`.`addressOne`, `company`.`addressTwo`, `company`.`city`, `company`.`zip`, `company`.`phone`, `company`.`web`, `company`.`fax`, `company`.`misc`, `company`.`created_at`, `company`.`updated_at`, `company`.`deleted_at`, `company`.`user_id`, `contacts`.`id` AS `contacts.id`, `contacts`.`name` AS `contacts.name`, `contacts`.`phone` AS `contacts.phone`, `contacts`.`email` AS `contacts.email`, `contacts`.`position` AS `contacts.position`, `contacts`.`created_at` AS `contacts.created_at`, `contacts`.`updated_at` AS `contacts.updated_at`, `contacts`.`deleted_at` AS `contacts.deleted_at`, `contacts`.`company_id` AS `contacts.company_id`, `quotes`.`id` AS `quotes.id`, `quotes`.`name` AS `quotes.name`, `quotes`.`created_at` AS `quotes.created_at`, `quotes`.`updated_at` AS `quotes.updated_at`, `quotes`.`deleted_at` AS `quotes.deleted_at`, `quotes`.`company_id` AS `quotes.company_id` FROM `company` AS `company` LEFT OUTER JOIN `contact` AS `contacts` ON `company`.`id` = `contacts`.`company_id` LEFT OUTER JOIN `quote` AS `quotes` ON `company`.`id` = `quotes`.`company_id`;
Executing (default): SELECT `id`, `firstName`, `lastName`, `passHash`, `role`, `email`, `addressOne`, `addressTwo`, `phone`, `businessName`, `businessWeb`, `businessPhone`, `businessFax`, `created_at`, `updated_at`, `deleted_at` FROM `user` AS `user` WHERE `user`.`id` = 'd08dd52f-7d2a-4fa9-80e6-286750b6735e';
user  Instance {
  dataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _previousDataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _changed: {},
  '$modelOptions': 
   { timestamps: true,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: true,
     underscoredAll: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: [],
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     omitNul: false,
     sequelize: 
      Sequelize {
        options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  '$options': 
   { isNewRecord: false,
     '$schema': null,
     '$schemaDelimiter': '',
     raw: true,
     attributes: 
      [ 'id',
        'firstName',
        'lastName',
        'passHash',
        'role',
        'email',
        'addressOne',
        'addressTwo',
        'phone',
        'businessName',
        'businessWeb',
        'businessPhone',
        'businessFax',
        'created_at',
        'updated_at',
        'deleted_at' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
Executing (default): SELECT `company`.`id`, `company`.`name`, `company`.`addressOne`, `company`.`addressTwo`, `company`.`city`, `company`.`zip`, `company`.`phone`, `company`.`web`, `company`.`fax`, `company`.`misc`, `company`.`created_at`, `company`.`updated_at`, `company`.`deleted_at`, `company`.`user_id`, `contacts`.`id` AS `contacts.id`, `contacts`.`name` AS `contacts.name`, `contacts`.`phone` AS `contacts.phone`, `contacts`.`email` AS `contacts.email`, `contacts`.`position` AS `contacts.position`, `contacts`.`created_at` AS `contacts.created_at`, `contacts`.`updated_at` AS `contacts.updated_at`, `contacts`.`deleted_at` AS `contacts.deleted_at`, `contacts`.`company_id` AS `contacts.company_id`, `quotes`.`id` AS `quotes.id`, `quotes`.`name` AS `quotes.name`, `quotes`.`created_at` AS `quotes.created_at`, `quotes`.`updated_at` AS `quotes.updated_at`, `quotes`.`deleted_at` AS `quotes.deleted_at`, `quotes`.`company_id` AS `quotes.company_id` FROM `company` AS `company` LEFT OUTER JOIN `contact` AS `contacts` ON `company`.`id` = `contacts`.`company_id` LEFT OUTER JOIN `quote` AS `quotes` ON `company`.`id` = `quotes`.`company_id`;
Executing (default): SELECT `id`, `firstName`, `lastName`, `passHash`, `role`, `email`, `addressOne`, `addressTwo`, `phone`, `businessName`, `businessWeb`, `businessPhone`, `businessFax`, `created_at`, `updated_at`, `deleted_at` FROM `user` AS `user` WHERE `user`.`id` = 'd08dd52f-7d2a-4fa9-80e6-286750b6735e';
user  Instance {
  dataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _previousDataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _changed: {},
  '$modelOptions': 
   { timestamps: true,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: true,
     underscoredAll: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: [],
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     omitNul: false,
     sequelize: 
      Sequelize {
        options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  '$options': 
   { isNewRecord: false,
     '$schema': null,
     '$schemaDelimiter': '',
     raw: true,
     attributes: 
      [ 'id',
        'firstName',
        'lastName',
        'passHash',
        'role',
        'email',
        'addressOne',
        'addressTwo',
        'phone',
        'businessName',
        'businessWeb',
        'businessPhone',
        'businessFax',
        'created_at',
        'updated_at',
        'deleted_at' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
Executing (default): SELECT `company`.`id`, `company`.`name`, `company`.`addressOne`, `company`.`addressTwo`, `company`.`city`, `company`.`zip`, `company`.`phone`, `company`.`web`, `company`.`fax`, `company`.`misc`, `company`.`created_at`, `company`.`updated_at`, `company`.`deleted_at`, `company`.`user_id`, `contacts`.`id` AS `contacts.id`, `contacts`.`name` AS `contacts.name`, `contacts`.`phone` AS `contacts.phone`, `contacts`.`email` AS `contacts.email`, `contacts`.`position` AS `contacts.position`, `contacts`.`created_at` AS `contacts.created_at`, `contacts`.`updated_at` AS `contacts.updated_at`, `contacts`.`deleted_at` AS `contacts.deleted_at`, `contacts`.`company_id` AS `contacts.company_id`, `quotes`.`id` AS `quotes.id`, `quotes`.`name` AS `quotes.name`, `quotes`.`created_at` AS `quotes.created_at`, `quotes`.`updated_at` AS `quotes.updated_at`, `quotes`.`deleted_at` AS `quotes.deleted_at`, `quotes`.`company_id` AS `quotes.company_id` FROM `company` AS `company` LEFT OUTER JOIN `contact` AS `contacts` ON `company`.`id` = `contacts`.`company_id` LEFT OUTER JOIN `quote` AS `quotes` ON `company`.`id` = `quotes`.`company_id`;
Executing (default): SELECT `id`, `firstName`, `lastName`, `passHash`, `role`, `email`, `addressOne`, `addressTwo`, `phone`, `businessName`, `businessWeb`, `businessPhone`, `businessFax`, `created_at`, `updated_at`, `deleted_at` FROM `user` AS `user` WHERE `user`.`id` = 'd08dd52f-7d2a-4fa9-80e6-286750b6735e';
user  Instance {
  dataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _previousDataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _changed: {},
  '$modelOptions': 
   { timestamps: true,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: true,
     underscoredAll: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: [],
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     omitNul: false,
     sequelize: 
      Sequelize {
        options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  '$options': 
   { isNewRecord: false,
     '$schema': null,
     '$schemaDelimiter': '',
     raw: true,
     attributes: 
      [ 'id',
        'firstName',
        'lastName',
        'passHash',
        'role',
        'email',
        'addressOne',
        'addressTwo',
        'phone',
        'businessName',
        'businessWeb',
        'businessPhone',
        'businessFax',
        'created_at',
        'updated_at',
        'deleted_at' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
Executing (default): SELECT `company`.`id`, `company`.`name`, `company`.`addressOne`, `company`.`addressTwo`, `company`.`city`, `company`.`zip`, `company`.`phone`, `company`.`web`, `company`.`fax`, `company`.`misc`, `company`.`created_at`, `company`.`updated_at`, `company`.`deleted_at`, `company`.`user_id`, `contacts`.`id` AS `contacts.id`, `contacts`.`name` AS `contacts.name`, `contacts`.`phone` AS `contacts.phone`, `contacts`.`email` AS `contacts.email`, `contacts`.`position` AS `contacts.position`, `contacts`.`created_at` AS `contacts.created_at`, `contacts`.`updated_at` AS `contacts.updated_at`, `contacts`.`deleted_at` AS `contacts.deleted_at`, `contacts`.`company_id` AS `contacts.company_id`, `quotes`.`id` AS `quotes.id`, `quotes`.`name` AS `quotes.name`, `quotes`.`created_at` AS `quotes.created_at`, `quotes`.`updated_at` AS `quotes.updated_at`, `quotes`.`deleted_at` AS `quotes.deleted_at`, `quotes`.`company_id` AS `quotes.company_id` FROM `company` AS `company` LEFT OUTER JOIN `contact` AS `contacts` ON `company`.`id` = `contacts`.`company_id` LEFT OUTER JOIN `quote` AS `quotes` ON `company`.`id` = `quotes`.`company_id`;
Executing (default): SELECT `id`, `firstName`, `lastName`, `passHash`, `role`, `email`, `addressOne`, `addressTwo`, `phone`, `businessName`, `businessWeb`, `businessPhone`, `businessFax`, `created_at`, `updated_at`, `deleted_at` FROM `user` AS `user` WHERE `user`.`id` = 'd08dd52f-7d2a-4fa9-80e6-286750b6735e';
user  Instance {
  dataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _previousDataValues: 
   { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e',
     firstName: '(R)Dev;)',
     lastName: 'Rex the Driven',
     passHash: null,
     role: 'admin',
     email: 'test@tester.com',
     addressOne: null,
     addressTwo: null,
     phone: '555 No More HUP',
     businessName: null,
     businessWeb: null,
     businessPhone: null,
     businessFax: null,
     created_at: 2017-05-06T23:32:14.922Z,
     updated_at: 2017-05-13T10:13:54.844Z,
     deleted_at: null },
  _changed: {},
  '$modelOptions': 
   { timestamps: true,
     instanceMethods: {},
     classMethods: {},
     validate: {},
     freezeTableName: true,
     underscored: true,
     underscoredAll: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { id: 'd08dd52f-7d2a-4fa9-80e6-286750b6735e' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: [],
     hooks: {},
     indexes: [],
     name: { plural: 'users', singular: 'user' },
     omitNul: false,
     sequelize: 
      Sequelize {
        options: [Object],
        config: [Object],
        dialect: [Object],
        models: [Object],
        modelManager: [Object],
        connectionManager: [Object],
        importCache: {},
        test: [Object],
        queryInterface: [Object] },
     uniqueKeys: {},
     hasPrimaryKeys: true },
  '$options': 
   { isNewRecord: false,
     '$schema': null,
     '$schemaDelimiter': '',
     raw: true,
     attributes: 
      [ 'id',
        'firstName',
        'lastName',
        'passHash',
        'role',
        'email',
        'addressOne',
        'addressTwo',
        'phone',
        'businessName',
        'businessWeb',
        'businessPhone',
        'businessFax',
        'created_at',
        'updated_at',
        'deleted_at' ] },
  hasPrimaryKeys: true,
  __eagerlyLoadedAssociations: [],
  isNewRecord: false }
Executing (default): SELECT `company`.`id`, `company`.`name`, `company`.`addressOne`, `company`.`addressTwo`, `company`.`city`, `company`.`zip`, `company`.`phone`, `company`.`web`, `company`.`fax`, `company`.`misc`, `company`.`created_at`, `company`.`updated_at`, `company`.`deleted_at`, `company`.`user_id`, `contacts`.`id` AS `contacts.id`, `contacts`.`name` AS `contacts.name`, `contacts`.`phone` AS `contacts.phone`, `contacts`.`email` AS `contacts.email`, `contacts`.`position` AS `contacts.position`, `contacts`.`created_at` AS `contacts.created_at`, `contacts`.`updated_at` AS `contacts.updated_at`, `contacts`.`deleted_at` AS `contacts.deleted_at`, `contacts`.`company_id` AS `contacts.company_id`, `quotes`.`id` AS `quotes.id`, `quotes`.`name` AS `quotes.name`, `quotes`.`created_at` AS `quotes.created_at`, `quotes`.`updated_at` AS `quotes.updated_at`, `quotes`.`deleted_at` AS `quotes.deleted_at`, `quotes`.`company_id` AS `quotes.company_id` FROM `company` AS `company` LEFT OUTER JOIN `contact` AS `contacts` ON `company`.`id` = `contacts`.`company_id` LEFT OUTER JOIN `quote` AS `quotes` ON `company`.`id` = `quotes`.`company_id`;
